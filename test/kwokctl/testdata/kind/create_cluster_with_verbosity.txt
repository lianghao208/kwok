# Save cluster config to <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kwok.yaml
mkdir -p <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kind.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
nodes:
- role: control-plane
  extraPortMappings:
  - containerPort: 9090
    hostPort: 9090
    protocol: TCP
  kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    etcd:
      local:
        extraArgs:
          "log-level": "debug"
  - |
    kind: ClusterConfiguration
    apiServer:
      extraArgs:
        "v": "4"
        "max-requests-inflight": "0"
        "max-mutating-requests-inflight": "0"
        "enable-priority-and-fairness": "false"
  - |
    kind: ClusterConfiguration
    controllerManager:
      extraArgs:
        "v": "4"
        "kube-api-qps": "5000"
        "kube-api-burst": "10000"
  - |
    kind: ClusterConfiguration
    scheduler:
      extraArgs:
        "v": "4"
        "kube-api-qps": "5000"
        "kube-api-burst": "10000"
  # mount the local file on the control plane
  extraMounts:
  - hostPath: <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kwok.yaml
    containerPath: /etc/kwok/kwok.yaml
    readOnly: true
EOF
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kwok-controller-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: kwok-controller
  name: kwok-controller
  namespace: kube-system
spec:
  containers:
  - args:
    - --config=/etc/kwok/kwok.yaml
    - --v=DEBUG
    - --manage-all-nodes=false
    - --manage-nodes-with-annotation-selector=kwok.x-k8s.io/node=fake
    - --manage-nodes-with-label-selector=
    - --disregard-status-with-annotation-selector=kwok.x-k8s.io/status=custom
    - --disregard-status-with-label-selector=
    - --kubeconfig=/etc/kubernetes/admin.conf
    - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
    - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
    - --node-ip=$(POD_IP)
    - --node-name=kwok-controller.kube-system.svc
    - --node-port=10247
    - --node-lease-duration-seconds=40
    env:
    - name: POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    image: 'localhost/kwok:test'
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 10247
        scheme: HTTP
      initialDelaySeconds: 2
      periodSeconds: 10
      timeoutSeconds: 2
    name: kwok-controller
    readinessProbe:
      failureThreshold: 5
      httpGet:
        path: /healthz
        port: 10247
        scheme: HTTP
      initialDelaySeconds: 2
      periodSeconds: 20
      timeoutSeconds: 2
    volumeMounts:
    - mountPath: /etc/kubernetes/admin.conf
      name: kubeconfig
      readOnly: true
    - mountPath: /etc/kwok/kwok.yaml
      name: config
      readOnly: true
    - mountPath: /etc/kubernetes/pki
      name: k8s-certs
      readOnly: true
  hostNetwork: true
  restartPolicy: Always
  volumes:
  - hostPath:
      path: /etc/kubernetes/admin.conf
      type: FileOrCreate
    name: kubeconfig
  - hostPath:
      path: /etc/kwok/kwok.yaml
      type: FileOrCreate
    name: config
  - hostPath:
      path: /etc/kubernetes/pki
      type: DirectoryOrCreate
    name: k8s-certs
EOF
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/prometheus-deployment.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-configmap
  namespace: kube-system
data:
  prometheus.yaml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
    alerting:
      alertmanagers:
        - follow_redirects: true
          enable_http2: true
          scheme: http
          timeout: 10s
          api_version: v2
          static_configs:
            - targets: [ ]
    scrape_configs:
      - job_name: "kwok-service-discovery"
        http_sd_configs:
        - url: http://localhost:10247/discovery/prometheus
      - job_name: "prometheus"
        scheme: http
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        static_configs:
          - targets:
              - "localhost:9090"
      - job_name: "etcd"
        scheme: https
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        tls_config:
          cert_file: /etc/kubernetes/pki/apiserver-etcd-client.crt
          key_file: /etc/kubernetes/pki/apiserver-etcd-client.key
          insecure_skip_verify: true
        static_configs:
          - targets:
              - "localhost:2379"
      - job_name: "kwok-controller"
        scheme: http
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        static_configs:
          - targets:
              - "localhost:10247"
      - job_name: "kube-apiserver"
        scheme: https
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        tls_config:
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        static_configs:
          - targets:
              - "localhost:6443"
      - job_name: "kube-controller-manager"
        scheme: https
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        tls_config:
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        static_configs:
          - targets:
              - "localhost:10257"
      - job_name: "kube-scheduler"
        scheme: https
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        tls_config:
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        static_configs:
          - targets:
              - "localhost:10259"
---
apiVersion: v1
kind: Pod
metadata:
  name: prometheus
  namespace: kube-system
spec:
  containers:
    - name: prometheus
      image: docker.io/prom/prometheus:v2.44.0
      args:
        - --config.file=/etc/prometheus/prometheus.yaml
        - --log.level=debug
      ports:
        - name: web
          containerPort: 9090
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus/
          readOnly: true
        - mountPath: /etc/kubernetes/pki
          name: k8s-certs
          readOnly: true
  volumes:
    - name: config-volume
      configMap:
        name: prometheus-configmap
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
  serviceAccount: prometheus
  serviceAccountName: prometheus
  restartPolicy: Always
  hostNetwork: true
  nodeName: kwok-<CLUSTER_NAME>-control-plane
EOF
docker pull docker.io/kindest/node:v1.27.3
docker pull localhost/kwok:test
docker pull docker.io/prom/prometheus:v2.44.0
# Save cluster config to <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kwok.yaml
KIND_EXPERIMENTAL_PROVIDER=docker kind create cluster --config <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kind.yaml --name kwok-<CLUSTER_NAME> --image docker.io/kindest/node:v1.27.3 --wait 29m
KIND_EXPERIMENTAL_PROVIDER=docker kind load docker-image localhost/kwok:test --name kwok-<CLUSTER_NAME>
KIND_EXPERIMENTAL_PROVIDER=docker kind load docker-image docker.io/prom/prometheus:v2.44.0 --name kwok-<CLUSTER_NAME>
kubectl config view --minify=true --raw=true
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kubeconfig.yaml
EOF
docker cp <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kwok-controller-pod.yaml kwok-<CLUSTER_NAME>-control-plane:/etc/kubernetes/manifests/kwok-controller.yaml
mkdir -p <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/pki
docker cp kwok-<CLUSTER_NAME>-control-plane:/etc/kubernetes/pki/ca.crt <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/pki/ca.crt
docker cp kwok-<CLUSTER_NAME>-control-plane:/etc/kubernetes/pki/ca.key <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/pki/ca.key
kubectl apply -f <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/prometheus-deployment.yaml
kubectl cordon kwok-<CLUSTER_NAME>-control-plane
# Add context kwok-<CLUSTER_NAME> to ~/.kube/config
