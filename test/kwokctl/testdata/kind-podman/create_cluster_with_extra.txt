# Save cluster config to ~/.kwok/clusters/<CLUSTER_NAME>/kwok.yaml
mkdir -p ~/.kwok/clusters/<CLUSTER_NAME>
cat <<EOF >~/.kwok/clusters/<CLUSTER_NAME>/kind.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
nodes:
- role: control-plane
  extraPortMappings:
  - containerPort: 9090
    hostPort: 9090
    protocol: TCP
  kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    etcd:
      local:
        extraArgs:
          "log-level": "debug"
        extraVolumes:
        - name: tmp-etcd
          hostPath: /var/components/etcd/extras/tmp
          mountPath: /extras/tmp
          readOnly: false
          pathType: DirectoryOrCreate
  - |
    kind: ClusterConfiguration
    apiServer:
      extraArgs:
        "v": "5"
        "max-requests-inflight": "0"
        "max-mutating-requests-inflight": "0"
        "enable-priority-and-fairness": "false"
      extraVolumes:
      - name: tmp-apiserver
        hostPath: /var/components/apiserver/extras/tmp
        mountPath: /extras/tmp
        readOnly: false
        pathType: DirectoryOrCreate
  - |
    kind: ClusterConfiguration
    controllerManager:
      extraArgs:
        "v": "5"
        "kube-api-qps": "5000"
        "kube-api-burst": "10000"
      extraVolumes:
      - name: tmp-controller-manager
        hostPath: /var/components/controller-manager/extras/tmp
        mountPath: /extras/tmp
        readOnly: false
        pathType: DirectoryOrCreate
  - |
    kind: ClusterConfiguration
    scheduler:
      extraArgs:
        "v": "5"
        "kube-api-qps": "5000"
        "kube-api-burst": "10000"
      extraVolumes:
      - name: tmp-scheduler
        hostPath: /var/components/scheduler/extras/tmp
        mountPath: /extras/tmp
        readOnly: false
        pathType: DirectoryOrCreate
  # mount the local file on the control plane
  extraMounts:
  - hostPath: ~/.kwok/clusters/<CLUSTER_NAME>/kwok.yaml
    containerPath: /etc/kwok/kwok.yaml
    readOnly: true
  - hostPath: <ROOT_DIR>/extras/etcd
    containerPath: /var/components/etcd/extras/tmp
    readOnly: false
  - hostPath: <ROOT_DIR>/extras/apiserver
    containerPath: /var/components/apiserver/extras/tmp
    readOnly: false
  - hostPath: <ROOT_DIR>/extras/controller-manager
    containerPath: /var/components/controller-manager/extras/tmp
    readOnly: false
  - hostPath: <ROOT_DIR>/extras/scheduler
    containerPath: /var/components/scheduler/extras/tmp
    readOnly: false
  - hostPath: <ROOT_DIR>/extras/controller
    containerPath: /var/components/controller/extras/tmp
    readOnly: false
EOF
cat <<EOF >~/.kwok/clusters/<CLUSTER_NAME>/kwok-controller-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: kwok-controller
  name: kwok-controller
  namespace: kube-system
spec:
  containers:
  - args:
    - --config=/etc/kwok/kwok.yaml
    - --v=INFO
    - --manage-all-nodes=false
    - --manage-nodes-with-annotation-selector=kwok.x-k8s.io/node=fake
    - --manage-nodes-with-label-selector=
    - --disregard-status-with-annotation-selector=kwok.x-k8s.io/status=custom
    - --disregard-status-with-label-selector=
    - --kubeconfig=/etc/kubernetes/admin.conf
    - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
    - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
    - --node-ip=$(POD_IP)
    - --node-name=kwok-controller.kube-system.svc
    - --node-port=10247
    - --node-lease-duration-seconds=40
    - --v=-4
    env:
    - name: POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: TEST_KEY
      value: TEST_VALUE
    image: 'localhost/kwok:test'
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 10247
        scheme: HTTP
      initialDelaySeconds: 2
      periodSeconds: 10
      timeoutSeconds: 2
    name: kwok-controller
    readinessProbe:
      failureThreshold: 5
      httpGet:
        path: /healthz
        port: 10247
        scheme: HTTP
      initialDelaySeconds: 2
      periodSeconds: 20
      timeoutSeconds: 2
    volumeMounts:
    - mountPath: /etc/kubernetes/admin.conf
      name: kubeconfig
      readOnly: true
    - mountPath: /etc/kwok/kwok.yaml
      name: config
      readOnly: true
    - mountPath: /etc/kubernetes/pki
      name: k8s-certs
      readOnly: true
    - mountPath: /extras/tmp
      name: tmp-controller
      readOnly: false
  hostNetwork: true
  restartPolicy: Always
  volumes:
  - hostPath:
      path: /etc/kubernetes/admin.conf
      type: FileOrCreate
    name: kubeconfig
  - hostPath:
      path: /etc/kwok/kwok.yaml
      type: FileOrCreate
    name: config
  - hostPath:
      path: /etc/kubernetes/pki
      type: DirectoryOrCreate
    name: k8s-certs
  - hostPath:
      path: /var/components/controller/extras/tmp
      type: DirectoryOrCreate
    name: tmp-controller
EOF
cat <<EOF >~/.kwok/clusters/<CLUSTER_NAME>/prometheus-deployment.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-configmap
  namespace: kube-system
data:
  prometheus.yaml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
    alerting:
      alertmanagers:
        - follow_redirects: true
          enable_http2: true
          scheme: http
          timeout: 10s
          api_version: v2
          static_configs:
            - targets: [ ]
    scrape_configs:
      - job_name: "prometheus"
        scheme: http
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        static_configs:
          - targets:
              - "localhost:9090"
      - job_name: "etcd"
        scheme: https
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        tls_config:
          cert_file: /etc/kubernetes/pki/apiserver-etcd-client.crt
          key_file: /etc/kubernetes/pki/apiserver-etcd-client.key
          insecure_skip_verify: true
        static_configs:
          - targets:
              - "localhost:2379"
      - job_name: "kwok-controller"
        scheme: http
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        static_configs:
          - targets:
              - "localhost:10247"
      - job_name: "kube-apiserver"
        scheme: https
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        tls_config:
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        static_configs:
          - targets:
              - "localhost:6443"
      - job_name: "kube-controller-manager"
        scheme: https
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        tls_config:
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        static_configs:
          - targets:
              - "localhost:10257"
      - job_name: "kube-scheduler"
        scheme: https
        honor_timestamps: true
        metrics_path: /metrics
        follow_redirects: true
        enable_http2: true
        tls_config:
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        static_configs:
          - targets:
              - "localhost:10259"
---
apiVersion: v1
kind: Pod
metadata:
  name: prometheus
  namespace: kube-system
spec:
  containers:
    - name: prometheus
      image: docker.io/prom/prometheus:v2.44.0
      env:
      - name: TEST_KEY
        value: TEST_VALUE
      args:
        - --config.file=/etc/prometheus/prometheus.yaml
        - --log.level=debug
      ports:
        - name: web
          containerPort: 9090
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus/
          readOnly: true
        - mountPath: /etc/kubernetes/pki
          name: k8s-certs
          readOnly: true
        - mountPath: /extras/tmp
          name: tmp-prometheus
          readOnly: false
  volumes:
    - name: config-volume
      configMap:
        name: prometheus-configmap
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: <ROOT_DIR>/extras/prometheus
        type: DirectoryOrCreate
      name: tmp-prometheus
  serviceAccount: prometheus
  serviceAccountName: prometheus
  restartPolicy: Always
  hostNetwork: true
  nodeName: kwok-<CLUSTER_NAME>-control-plane
EOF
podman pull docker.io/kindest/node:v1.27.3
podman pull localhost/kwok:test
podman pull docker.io/prom/prometheus:v2.44.0
# Save cluster config to ~/.kwok/clusters/<CLUSTER_NAME>/kwok.yaml
KIND_EXPERIMENTAL_PROVIDER=podman kind create cluster --config ~/.kwok/clusters/<CLUSTER_NAME>/kind.yaml --name kwok-<CLUSTER_NAME> --image docker.io/kindest/node:v1.27.3 --wait 29m
mkdir -p ~/.kwok/cache/image-archive/localhost/kwok
podman save localhost/kwok:test -o ~/.kwok/cache/image-archive/localhost/kwok/test.tar
KIND_EXPERIMENTAL_PROVIDER=podman kind load image-archive ~/.kwok/cache/image-archive/localhost/kwok/test.tar --name kwok-<CLUSTER_NAME>
rm ~/.kwok/cache/image-archive/localhost/kwok/test.tar
mkdir -p ~/.kwok/cache/image-archive/docker.io/prom/prometheus
podman save docker.io/prom/prometheus:v2.44.0 -o ~/.kwok/cache/image-archive/docker.io/prom/prometheus/v2.44.0.tar
KIND_EXPERIMENTAL_PROVIDER=podman kind load image-archive ~/.kwok/cache/image-archive/docker.io/prom/prometheus/v2.44.0.tar --name kwok-<CLUSTER_NAME>
rm ~/.kwok/cache/image-archive/docker.io/prom/prometheus/v2.44.0.tar
kubectl config view --minify=true --raw=true
cat <<EOF >~/.kwok/clusters/<CLUSTER_NAME>/kubeconfig.yaml
EOF
podman cp ~/.kwok/clusters/<CLUSTER_NAME>/kwok-controller-pod.yaml kwok-<CLUSTER_NAME>-control-plane:/etc/kubernetes/manifests/kwok-controller.yaml
mkdir -p ~/.kwok/clusters/<CLUSTER_NAME>/pki
podman cp kwok-<CLUSTER_NAME>-control-plane:/etc/kubernetes/pki/ca.crt ~/.kwok/clusters/<CLUSTER_NAME>/pki/ca.crt
podman cp kwok-<CLUSTER_NAME>-control-plane:/etc/kubernetes/pki/ca.key ~/.kwok/clusters/<CLUSTER_NAME>/pki/ca.key
kubectl apply -f ~/.kwok/clusters/<CLUSTER_NAME>/prometheus-deployment.yaml
kubectl cordon kwok-<CLUSTER_NAME>-control-plane
# Add context kwok-<CLUSTER_NAME> to ~/.kube/config
